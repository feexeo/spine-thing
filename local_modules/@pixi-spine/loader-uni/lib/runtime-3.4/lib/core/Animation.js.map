{"version":3,"file":"Animation.js","sources":["../../../../../runtime-3.4/lib/core/Animation.mjs"],"sourcesContent":["import { VertexAttachment } from './attachments/Attachment.mjs';\nimport { MixBlend, MixDirection, MathUtils, Utils } from '@pixi-spine/base';\nimport './attachments/RegionAttachment.mjs';\n\nclass Animation {\n  constructor(name, timelines, duration) {\n    if (name == null)\n      throw new Error(\"name cannot be null.\");\n    if (timelines == null)\n      throw new Error(\"timelines cannot be null.\");\n    this.name = name;\n    this.timelines = timelines;\n    this.timelineIds = [];\n    for (let i = 0; i < timelines.length; i++)\n      this.timelineIds[timelines[i].getPropertyId()] = true;\n    this.duration = duration;\n  }\n  hasTimeline(id) {\n    return this.timelineIds[id] == true;\n  }\n  /** Applies all the animation's timelines to the specified skeleton.\n   *\n   * See Timeline {@link Timeline#apply(Skeleton, float, float, Array, float, MixBlend, MixDirection)}.\n   * @param loop If true, the animation repeats after {@link #getDuration()}.\n   * @param events May be null to ignore fired events. */\n  apply(skeleton, lastTime, time, loop, events, alpha, blend, direction) {\n    if (skeleton == null)\n      throw new Error(\"skeleton cannot be null.\");\n    if (loop && this.duration != 0) {\n      time %= this.duration;\n      if (lastTime > 0)\n        lastTime %= this.duration;\n    }\n    const timelines = this.timelines;\n    for (let i = 0, n = timelines.length; i < n; i++)\n      timelines[i].apply(skeleton, lastTime, time, events, alpha, blend, direction);\n  }\n  /** @param target After the first and before the last value.\n   * @returns index of first value greater than the target. */\n  static binarySearch(values, target, step = 1) {\n    let low = 0;\n    let high = values.length / step - 2;\n    if (high == 0)\n      return step;\n    let current = high >>> 1;\n    while (true) {\n      if (values[(current + 1) * step] <= target)\n        low = current + 1;\n      else\n        high = current;\n      if (low == high)\n        return (low + 1) * step;\n      current = low + high >>> 1;\n    }\n  }\n  static linearSearch(values, target, step) {\n    for (let i = 0, last = values.length - step; i <= last; i += step)\n      if (values[i] > target)\n        return i;\n    return -1;\n  }\n}\nvar TimelineType = /* @__PURE__ */ ((TimelineType2) => {\n  TimelineType2[TimelineType2[\"rotate\"] = 0] = \"rotate\";\n  TimelineType2[TimelineType2[\"translate\"] = 1] = \"translate\";\n  TimelineType2[TimelineType2[\"scale\"] = 2] = \"scale\";\n  TimelineType2[TimelineType2[\"shear\"] = 3] = \"shear\";\n  TimelineType2[TimelineType2[\"attachment\"] = 4] = \"attachment\";\n  TimelineType2[TimelineType2[\"color\"] = 5] = \"color\";\n  TimelineType2[TimelineType2[\"deform\"] = 6] = \"deform\";\n  TimelineType2[TimelineType2[\"event\"] = 7] = \"event\";\n  TimelineType2[TimelineType2[\"drawOrder\"] = 8] = \"drawOrder\";\n  TimelineType2[TimelineType2[\"ikConstraint\"] = 9] = \"ikConstraint\";\n  TimelineType2[TimelineType2[\"transformConstraint\"] = 10] = \"transformConstraint\";\n  TimelineType2[TimelineType2[\"pathConstraintPosition\"] = 11] = \"pathConstraintPosition\";\n  TimelineType2[TimelineType2[\"pathConstraintSpacing\"] = 12] = \"pathConstraintSpacing\";\n  TimelineType2[TimelineType2[\"pathConstraintMix\"] = 13] = \"pathConstraintMix\";\n  TimelineType2[TimelineType2[\"twoColor\"] = 14] = \"twoColor\";\n  return TimelineType2;\n})(TimelineType || {});\nconst _CurveTimeline = class {\n  constructor(frameCount) {\n    this.curveData = [];\n    if (frameCount <= 0)\n      throw new Error(`frameCount must be > 0: ${frameCount}`);\n    this.curves = Utils.newFloatArray((frameCount - 1) * _CurveTimeline.BEZIER_SIZE);\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.curves.length / _CurveTimeline.BEZIER_SIZE + 1;\n  }\n  /** Sets the specified key frame to linear interpolation. */\n  setLinear(frameIndex) {\n    this.curves[frameIndex * _CurveTimeline.BEZIER_SIZE] = _CurveTimeline.LINEAR;\n  }\n  /** Sets the specified key frame to stepped interpolation. */\n  setStepped(frameIndex) {\n    this.curves[frameIndex * _CurveTimeline.BEZIER_SIZE] = _CurveTimeline.STEPPED;\n  }\n  /** Returns the interpolation type for the specified key frame.\n   * @returns Linear is 0, stepped is 1, Bezier is 2. */\n  getCurveType(frameIndex) {\n    const index = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    if (index == this.curves.length)\n      return _CurveTimeline.LINEAR;\n    const type = this.curves[index];\n    if (type == _CurveTimeline.LINEAR)\n      return _CurveTimeline.LINEAR;\n    if (type == _CurveTimeline.STEPPED)\n      return _CurveTimeline.STEPPED;\n    return _CurveTimeline.BEZIER;\n  }\n  /** Sets the specified key frame to Bezier interpolation. `cx1` and `cx2` are from 0 to 1,\n   * representing the percent of time between the two key frames. `cy1` and `cy2` are the percent of the\n   * difference between the key frame's values. */\n  setCurve(frameIndex, cx1, cy1, cx2, cy2) {\n    this.curveData.push({ frameIndex, cx1, cy1, cx2, cy2 });\n    const tmpx = (-cx1 * 2 + cx2) * 0.03;\n    const tmpy = (-cy1 * 2 + cy2) * 0.03;\n    const dddfx = ((cx1 - cx2) * 3 + 1) * 6e-3;\n    const dddfy = ((cy1 - cy2) * 3 + 1) * 6e-3;\n    let ddfx = tmpx * 2 + dddfx;\n    let ddfy = tmpy * 2 + dddfy;\n    let dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667;\n    let dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;\n    let i = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    const curves = this.curves;\n    curves[i++] = _CurveTimeline.BEZIER;\n    let x = dfx;\n    let y = dfy;\n    for (let n = i + _CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n      curves[i] = x;\n      curves[i + 1] = y;\n      dfx += ddfx;\n      dfy += ddfy;\n      ddfx += dddfx;\n      ddfy += dddfy;\n      x += dfx;\n      y += dfy;\n    }\n  }\n  /** Returns the interpolated percentage for the specified key frame and linear percentage. */\n  getCurvePercent(frameIndex, percent) {\n    percent = MathUtils.clamp(percent, 0, 1);\n    const curves = this.curves;\n    let i = frameIndex * _CurveTimeline.BEZIER_SIZE;\n    const type = curves[i];\n    if (type == _CurveTimeline.LINEAR)\n      return percent;\n    if (type == _CurveTimeline.STEPPED)\n      return 0;\n    i++;\n    let x = 0;\n    for (let start = i, n = i + _CurveTimeline.BEZIER_SIZE - 1; i < n; i += 2) {\n      x = curves[i];\n      if (x >= percent) {\n        let prevX;\n        let prevY;\n        if (i == start) {\n          prevX = 0;\n          prevY = 0;\n        } else {\n          prevX = curves[i - 2];\n          prevY = curves[i - 1];\n        }\n        return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);\n      }\n    }\n    const y = curves[i - 1];\n    return y + (1 - y) * (percent - x) / (1 - x);\n  }\n};\nlet CurveTimeline = _CurveTimeline;\nCurveTimeline.LINEAR = 0;\nCurveTimeline.STEPPED = 1;\nCurveTimeline.BEZIER = 2;\nCurveTimeline.BEZIER_SIZE = 10 * 2 - 1;\nconst _RotateTimeline = class extends CurveTimeline {\n  // time, degrees, ...\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"RotateTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount << 1);\n  }\n  getPropertyId() {\n    return (0 /* rotate */ << 24) + this.boneIndex;\n  }\n  /** Sets the time and angle of the specified keyframe. */\n  setFrame(frameIndex, time, degrees) {\n    this.data.push({ frameIndex, time, degrees });\n    frameIndex <<= 1;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _RotateTimeline.ROTATION] = degrees;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation;\n          return;\n        case MixBlend.first:\n          const r2 = bone.data.rotation - bone.rotation;\n          bone.rotation += (r2 - (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360) * alpha;\n      }\n      return;\n    }\n    if (time >= frames[frames.length - _RotateTimeline.ENTRIES]) {\n      let r2 = frames[frames.length + _RotateTimeline.PREV_ROTATION];\n      switch (blend) {\n        case MixBlend.setup:\n          bone.rotation = bone.data.rotation + r2 * alpha;\n          break;\n        case MixBlend.first:\n        case MixBlend.replace:\n          r2 += bone.data.rotation - bone.rotation;\n          r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;\n        case MixBlend.add:\n          bone.rotation += r2 * alpha;\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time, _RotateTimeline.ENTRIES);\n    const prevRotation = frames[frame + _RotateTimeline.PREV_ROTATION];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent((frame >> 1) - 1, 1 - (time - frameTime) / (frames[frame + _RotateTimeline.PREV_TIME] - frameTime));\n    let r = frames[frame + _RotateTimeline.ROTATION] - prevRotation;\n    r = prevRotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * percent;\n    switch (blend) {\n      case MixBlend.setup:\n        bone.rotation = bone.data.rotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        r += bone.data.rotation - bone.rotation;\n      case MixBlend.add:\n        bone.rotation += (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;\n    }\n  }\n};\nlet RotateTimeline = _RotateTimeline;\nRotateTimeline.ENTRIES = 2;\nRotateTimeline.PREV_TIME = -2;\nRotateTimeline.PREV_ROTATION = -1;\nRotateTimeline.ROTATION = 1;\nconst _TranslateTimeline = class extends CurveTimeline {\n  // time, x, y, ...\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TranslateTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TranslateTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (1 /* translate */ << 24) + this.boneIndex;\n  }\n  /** Sets the time in seconds, x, and y values for the specified key frame. */\n  setFrame(frameIndex, time, x, y) {\n    this.data.push({ frameIndex, time, x, y });\n    frameIndex *= _TranslateTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TranslateTimeline.X] = x;\n    this.frames[frameIndex + _TranslateTimeline.Y] = y;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.x = bone.data.x;\n          bone.y = bone.data.y;\n          return;\n        case MixBlend.first:\n          bone.x += (bone.data.x - bone.x) * alpha;\n          bone.y += (bone.data.y - bone.y) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - _TranslateTimeline.ENTRIES]) {\n      x = frames[frames.length + _TranslateTimeline.PREV_X];\n      y = frames[frames.length + _TranslateTimeline.PREV_Y];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TranslateTimeline.ENTRIES);\n      x = frames[frame + _TranslateTimeline.PREV_X];\n      y = frames[frame + _TranslateTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _TranslateTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _TranslateTimeline.PREV_TIME] - frameTime));\n      x += (frames[frame + _TranslateTimeline.X] - x) * percent;\n      y += (frames[frame + _TranslateTimeline.Y] - y) * percent;\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.x = bone.data.x + x * alpha;\n        bone.y = bone.data.y + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.x += (bone.data.x + x - bone.x) * alpha;\n        bone.y += (bone.data.y + y - bone.y) * alpha;\n        break;\n      case MixBlend.add:\n        bone.x += x * alpha;\n        bone.y += y * alpha;\n    }\n  }\n};\nlet TranslateTimeline = _TranslateTimeline;\nTranslateTimeline.ENTRIES = 3;\nTranslateTimeline.PREV_TIME = -3;\nTranslateTimeline.PREV_X = -2;\nTranslateTimeline.PREV_Y = -1;\nTranslateTimeline.X = 1;\nTranslateTimeline.Y = 2;\nclass ScaleTimeline extends TranslateTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ScaleTimeline\";\n  }\n  getPropertyId() {\n    return (2 /* scale */ << 24) + this.boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.scaleX = bone.data.scaleX;\n          bone.scaleY = bone.data.scaleY;\n          return;\n        case MixBlend.first:\n          bone.scaleX += (bone.data.scaleX - bone.scaleX) * alpha;\n          bone.scaleY += (bone.data.scaleY - bone.scaleY) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - ScaleTimeline.ENTRIES]) {\n      x = frames[frames.length + ScaleTimeline.PREV_X] * bone.data.scaleX;\n      y = frames[frames.length + ScaleTimeline.PREV_Y] * bone.data.scaleY;\n    } else {\n      const frame = Animation.binarySearch(frames, time, ScaleTimeline.ENTRIES);\n      x = frames[frame + ScaleTimeline.PREV_X];\n      y = frames[frame + ScaleTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / ScaleTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ScaleTimeline.PREV_TIME] - frameTime));\n      x = (x + (frames[frame + ScaleTimeline.X] - x) * percent) * bone.data.scaleX;\n      y = (y + (frames[frame + ScaleTimeline.Y] - y) * percent) * bone.data.scaleY;\n    }\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        bone.scaleX += x - bone.data.scaleX;\n        bone.scaleY += y - bone.data.scaleY;\n      } else {\n        bone.scaleX = x;\n        bone.scaleY = y;\n      }\n    } else {\n      let bx = 0;\n      let by = 0;\n      if (direction == MixDirection.mixOut) {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = bone.data.scaleX;\n            by = bone.data.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = bone.scaleX;\n            by = bone.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bx) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - by) * alpha;\n            break;\n          case MixBlend.add:\n            bx = bone.scaleX;\n            by = bone.scaleY;\n            bone.scaleX = bx + (Math.abs(x) * MathUtils.signum(bx) - bone.data.scaleX) * alpha;\n            bone.scaleY = by + (Math.abs(y) * MathUtils.signum(by) - bone.data.scaleY) * alpha;\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup:\n            bx = Math.abs(bone.data.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.data.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.first:\n          case MixBlend.replace:\n            bx = Math.abs(bone.scaleX) * MathUtils.signum(x);\n            by = Math.abs(bone.scaleY) * MathUtils.signum(y);\n            bone.scaleX = bx + (x - bx) * alpha;\n            bone.scaleY = by + (y - by) * alpha;\n            break;\n          case MixBlend.add:\n            bx = MathUtils.signum(x);\n            by = MathUtils.signum(y);\n            bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.data.scaleX) * bx) * alpha;\n            bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.data.scaleY) * by) * alpha;\n        }\n      }\n    }\n  }\n}\nclass ShearTimeline extends TranslateTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ShearTimeline\";\n  }\n  getPropertyId() {\n    return (3 /* shear */ << 24) + this.boneIndex;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const frames = this.frames;\n    const bone = skeleton.bones[this.boneIndex];\n    if (!bone.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          bone.shearX = bone.data.shearX;\n          bone.shearY = bone.data.shearY;\n          return;\n        case MixBlend.first:\n          bone.shearX += (bone.data.shearX - bone.shearX) * alpha;\n          bone.shearY += (bone.data.shearY - bone.shearY) * alpha;\n      }\n      return;\n    }\n    let x = 0;\n    let y = 0;\n    if (time >= frames[frames.length - ShearTimeline.ENTRIES]) {\n      x = frames[frames.length + ShearTimeline.PREV_X];\n      y = frames[frames.length + ShearTimeline.PREV_Y];\n    } else {\n      const frame = Animation.binarySearch(frames, time, ShearTimeline.ENTRIES);\n      x = frames[frame + ShearTimeline.PREV_X];\n      y = frames[frame + ShearTimeline.PREV_Y];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / ShearTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + ShearTimeline.PREV_TIME] - frameTime));\n      x = x + (frames[frame + ShearTimeline.X] - x) * percent;\n      y = y + (frames[frame + ShearTimeline.Y] - y) * percent;\n    }\n    switch (blend) {\n      case MixBlend.setup:\n        bone.shearX = bone.data.shearX + x * alpha;\n        bone.shearY = bone.data.shearY + y * alpha;\n        break;\n      case MixBlend.first:\n      case MixBlend.replace:\n        bone.shearX += (bone.data.shearX + x - bone.shearX) * alpha;\n        bone.shearY += (bone.data.shearY + y - bone.shearY) * alpha;\n        break;\n      case MixBlend.add:\n        bone.shearX += x * alpha;\n        bone.shearY += y * alpha;\n    }\n  }\n}\nconst _ColorTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"ColorTimeline\";\n    // time, r, g, b, a, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _ColorTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (5 /* color */ << 24) + this.slotIndex;\n  }\n  /** Sets the time in seconds, red, green, blue, and alpha for the specified key frame. */\n  setFrame(frameIndex, time, r, g, b, a) {\n    this.data.push({ frameIndex, time, r, g, b, a });\n    frameIndex *= _ColorTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _ColorTimeline.R] = r;\n    this.frames[frameIndex + _ColorTimeline.G] = g;\n    this.frames[frameIndex + _ColorTimeline.B] = b;\n    this.frames[frameIndex + _ColorTimeline.A] = a;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          slot.color.setFromColor(slot.data.color);\n          return;\n        case MixBlend.first:\n          const color = slot.color;\n          const setup = slot.data.color;\n          color.add((setup.r - color.r) * alpha, (setup.g - color.g) * alpha, (setup.b - color.b) * alpha, (setup.a - color.a) * alpha);\n      }\n      return;\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n    if (time >= frames[frames.length - _ColorTimeline.ENTRIES]) {\n      const i = frames.length;\n      r = frames[i + _ColorTimeline.PREV_R];\n      g = frames[i + _ColorTimeline.PREV_G];\n      b = frames[i + _ColorTimeline.PREV_B];\n      a = frames[i + _ColorTimeline.PREV_A];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _ColorTimeline.ENTRIES);\n      r = frames[frame + _ColorTimeline.PREV_R];\n      g = frames[frame + _ColorTimeline.PREV_G];\n      b = frames[frame + _ColorTimeline.PREV_B];\n      a = frames[frame + _ColorTimeline.PREV_A];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _ColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _ColorTimeline.PREV_TIME] - frameTime));\n      r += (frames[frame + _ColorTimeline.R] - r) * percent;\n      g += (frames[frame + _ColorTimeline.G] - g) * percent;\n      b += (frames[frame + _ColorTimeline.B] - b) * percent;\n      a += (frames[frame + _ColorTimeline.A] - a) * percent;\n    }\n    if (alpha == 1)\n      slot.color.set(r, g, b, a);\n    else {\n      const color = slot.color;\n      if (blend == MixBlend.setup)\n        color.setFromColor(slot.data.color);\n      color.add((r - color.r) * alpha, (g - color.g) * alpha, (b - color.b) * alpha, (a - color.a) * alpha);\n    }\n  }\n};\nlet ColorTimeline = _ColorTimeline;\nColorTimeline.ENTRIES = 5;\nColorTimeline.PREV_TIME = -5;\nColorTimeline.PREV_R = -4;\nColorTimeline.PREV_G = -3;\nColorTimeline.PREV_B = -2;\nColorTimeline.PREV_A = -1;\nColorTimeline.R = 1;\nColorTimeline.G = 2;\nColorTimeline.B = 3;\nColorTimeline.A = 4;\nconst _TwoColorTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TwoColorTimeline\";\n    // time, r, g, b, a, r2, g2, b2, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TwoColorTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (14 /* twoColor */ << 24) + this.slotIndex;\n  }\n  /** Sets the time in seconds, light, and dark colors for the specified key frame. */\n  setFrame(frameIndex, time, r, g, b, a, r2, g2, b2) {\n    this.data.push({ frameIndex, time, r, g, b, a, r2, g2, b2 });\n    frameIndex *= _TwoColorTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TwoColorTimeline.R] = r;\n    this.frames[frameIndex + _TwoColorTimeline.G] = g;\n    this.frames[frameIndex + _TwoColorTimeline.B] = b;\n    this.frames[frameIndex + _TwoColorTimeline.A] = a;\n    this.frames[frameIndex + _TwoColorTimeline.R2] = r2;\n    this.frames[frameIndex + _TwoColorTimeline.G2] = g2;\n    this.frames[frameIndex + _TwoColorTimeline.B2] = b2;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          slot.color.setFromColor(slot.data.color);\n          slot.darkColor.setFromColor(slot.data.darkColor);\n          return;\n        case MixBlend.first:\n          const light = slot.color;\n          const dark = slot.darkColor;\n          const setupLight = slot.data.color;\n          const setupDark = slot.data.darkColor;\n          light.add((setupLight.r - light.r) * alpha, (setupLight.g - light.g) * alpha, (setupLight.b - light.b) * alpha, (setupLight.a - light.a) * alpha);\n          dark.add((setupDark.r - dark.r) * alpha, (setupDark.g - dark.g) * alpha, (setupDark.b - dark.b) * alpha, 0);\n      }\n      return;\n    }\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let a = 0;\n    let r2 = 0;\n    let g2 = 0;\n    let b2 = 0;\n    if (time >= frames[frames.length - _TwoColorTimeline.ENTRIES]) {\n      const i = frames.length;\n      r = frames[i + _TwoColorTimeline.PREV_R];\n      g = frames[i + _TwoColorTimeline.PREV_G];\n      b = frames[i + _TwoColorTimeline.PREV_B];\n      a = frames[i + _TwoColorTimeline.PREV_A];\n      r2 = frames[i + _TwoColorTimeline.PREV_R2];\n      g2 = frames[i + _TwoColorTimeline.PREV_G2];\n      b2 = frames[i + _TwoColorTimeline.PREV_B2];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TwoColorTimeline.ENTRIES);\n      r = frames[frame + _TwoColorTimeline.PREV_R];\n      g = frames[frame + _TwoColorTimeline.PREV_G];\n      b = frames[frame + _TwoColorTimeline.PREV_B];\n      a = frames[frame + _TwoColorTimeline.PREV_A];\n      r2 = frames[frame + _TwoColorTimeline.PREV_R2];\n      g2 = frames[frame + _TwoColorTimeline.PREV_G2];\n      b2 = frames[frame + _TwoColorTimeline.PREV_B2];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(frame / _TwoColorTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _TwoColorTimeline.PREV_TIME] - frameTime));\n      r += (frames[frame + _TwoColorTimeline.R] - r) * percent;\n      g += (frames[frame + _TwoColorTimeline.G] - g) * percent;\n      b += (frames[frame + _TwoColorTimeline.B] - b) * percent;\n      a += (frames[frame + _TwoColorTimeline.A] - a) * percent;\n      r2 += (frames[frame + _TwoColorTimeline.R2] - r2) * percent;\n      g2 += (frames[frame + _TwoColorTimeline.G2] - g2) * percent;\n      b2 += (frames[frame + _TwoColorTimeline.B2] - b2) * percent;\n    }\n    if (alpha == 1) {\n      slot.color.set(r, g, b, a);\n      slot.darkColor.set(r2, g2, b2, 1);\n    } else {\n      const light = slot.color;\n      const dark = slot.darkColor;\n      if (blend == MixBlend.setup) {\n        light.setFromColor(slot.data.color);\n        dark.setFromColor(slot.data.darkColor);\n      }\n      light.add((r - light.r) * alpha, (g - light.g) * alpha, (b - light.b) * alpha, (a - light.a) * alpha);\n      dark.add((r2 - dark.r) * alpha, (g2 - dark.g) * alpha, (b2 - dark.b) * alpha, 0);\n    }\n  }\n};\nlet TwoColorTimeline = _TwoColorTimeline;\nTwoColorTimeline.ENTRIES = 8;\nTwoColorTimeline.PREV_TIME = -8;\nTwoColorTimeline.PREV_R = -7;\nTwoColorTimeline.PREV_G = -6;\nTwoColorTimeline.PREV_B = -5;\nTwoColorTimeline.PREV_A = -4;\nTwoColorTimeline.PREV_R2 = -3;\nTwoColorTimeline.PREV_G2 = -2;\nTwoColorTimeline.PREV_B2 = -1;\nTwoColorTimeline.R = 1;\nTwoColorTimeline.G = 2;\nTwoColorTimeline.B = 3;\nTwoColorTimeline.A = 4;\nTwoColorTimeline.R2 = 5;\nTwoColorTimeline.G2 = 6;\nTwoColorTimeline.B2 = 7;\nclass AttachmentTimeline {\n  constructor(frameCount) {\n    this.type = \"AttachmentTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.attachmentNames = new Array(frameCount);\n  }\n  getPropertyId() {\n    return (4 /* attachment */ << 24) + this.slotIndex;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the attachment name for the specified key frame. */\n  setFrame(frameIndex, time, attachmentName) {\n    this.data.push({ frameIndex, time, attachmentName });\n    this.frames[frameIndex] = time;\n    this.attachmentNames[frameIndex] = attachmentName;\n  }\n  apply(skeleton, lastTime, time, events, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    if (direction == MixDirection.mixOut) {\n      if (blend == MixBlend.setup)\n        this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    const frames = this.frames;\n    if (time < frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first)\n        this.setAttachment(skeleton, slot, slot.data.attachmentName);\n      return;\n    }\n    let frameIndex = 0;\n    if (time >= frames[frames.length - 1])\n      frameIndex = frames.length - 1;\n    else\n      frameIndex = Animation.binarySearch(frames, time, 1) - 1;\n    const attachmentName = this.attachmentNames[frameIndex];\n    skeleton.slots[this.slotIndex].setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n  }\n  setAttachment(skeleton, slot, attachmentName) {\n    slot.setAttachment(attachmentName == null ? null : skeleton.getAttachment(this.slotIndex, attachmentName));\n  }\n}\nlet zeros = null;\nclass DeformTimeline extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"DeformTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.frameVertices = new Array(frameCount);\n    if (zeros == null)\n      zeros = Utils.newFloatArray(64);\n  }\n  getPropertyId() {\n    return (6 /* deform */ << 27) + Number(this.attachment.id) + this.slotIndex;\n  }\n  /** Sets the time in seconds and the vertices for the specified key frame.\n   * @param vertices Vertex positions for an unweighted VertexAttachment, or deform offsets if it has weights. */\n  setFrame(frameIndex, time, vertices, skin) {\n    this.data.push({ frameIndex, time, vertices, skin });\n    this.frames[frameIndex] = time;\n    this.frameVertices[frameIndex] = vertices;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const slot = skeleton.slots[this.slotIndex];\n    if (!slot.bone.active)\n      return;\n    const slotAttachment = slot.getAttachment();\n    if (!(slotAttachment instanceof VertexAttachment) || !(slotAttachment.deformAttachment == this.attachment))\n      return;\n    const deformArray = slot.deform || [];\n    if (deformArray.length == 0)\n      blend = MixBlend.setup;\n    const frameVertices = this.frameVertices;\n    const vertexCount = frameVertices[0].length;\n    const frames = this.frames;\n    if (time < frames[0]) {\n      const vertexAttachment = slotAttachment;\n      switch (blend) {\n        case MixBlend.setup:\n          deformArray.length = 0;\n          return;\n        case MixBlend.first:\n          if (alpha == 1) {\n            deformArray.length = 0;\n            break;\n          }\n          const deform2 = Utils.setArraySize(deformArray, vertexCount);\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++)\n              deform2[i] += (setupVertices[i] - deform2[i]) * alpha;\n          } else {\n            alpha = 1 - alpha;\n            for (let i = 0; i < vertexCount; i++)\n              deform2[i] *= alpha;\n          }\n      }\n      return;\n    }\n    const deform = Utils.setArraySize(deformArray, vertexCount);\n    if (time >= frames[frames.length - 1]) {\n      const lastVertices = frameVertices[frames.length - 1];\n      if (alpha == 1) {\n        if (blend == MixBlend.add) {\n          const vertexAttachment = slotAttachment;\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              deform[i] += lastVertices[i] - setupVertices[i];\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++)\n              deform[i] += lastVertices[i];\n          }\n        } else {\n          Utils.arrayCopy(lastVertices, 0, deform, 0, vertexCount);\n        }\n      } else {\n        switch (blend) {\n          case MixBlend.setup: {\n            const vertexAttachment2 = slotAttachment;\n            if (vertexAttachment2.bones == null) {\n              const setupVertices = vertexAttachment2.vertices;\n              for (let i = 0; i < vertexCount; i++) {\n                const setup = setupVertices[i];\n                deform[i] = setup + (lastVertices[i] - setup) * alpha;\n              }\n            } else {\n              for (let i = 0; i < vertexCount; i++)\n                deform[i] = lastVertices[i] * alpha;\n            }\n            break;\n          }\n          case MixBlend.first:\n          case MixBlend.replace:\n            for (let i = 0; i < vertexCount; i++)\n              deform[i] += (lastVertices[i] - deform[i]) * alpha;\n            break;\n          case MixBlend.add:\n            const vertexAttachment = slotAttachment;\n            if (vertexAttachment.bones == null) {\n              const setupVertices = vertexAttachment.vertices;\n              for (let i = 0; i < vertexCount; i++) {\n                deform[i] += (lastVertices[i] - setupVertices[i]) * alpha;\n              }\n            } else {\n              for (let i = 0; i < vertexCount; i++)\n                deform[i] += lastVertices[i] * alpha;\n            }\n        }\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time);\n    const prevVertices = frameVertices[frame - 1];\n    const nextVertices = frameVertices[frame];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent(frame - 1, 1 - (time - frameTime) / (frames[frame - 1] - frameTime));\n    if (alpha == 1) {\n      if (blend == MixBlend.add) {\n        const vertexAttachment = slotAttachment;\n        if (vertexAttachment.bones == null) {\n          const setupVertices = vertexAttachment.vertices;\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent - setupVertices[i];\n          }\n        } else {\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += prev + (nextVertices[i] - prev) * percent;\n          }\n        }\n      } else {\n        for (let i = 0; i < vertexCount; i++) {\n          const prev = prevVertices[i];\n          deform[i] = prev + (nextVertices[i] - prev) * percent;\n        }\n      }\n    } else {\n      switch (blend) {\n        case MixBlend.setup: {\n          const vertexAttachment2 = slotAttachment;\n          if (vertexAttachment2.bones == null) {\n            const setupVertices = vertexAttachment2.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              const setup = setupVertices[i];\n              deform[i] = setup + (prev + (nextVertices[i] - prev) * percent - setup) * alpha;\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] = (prev + (nextVertices[i] - prev) * percent) * alpha;\n            }\n          }\n          break;\n        }\n        case MixBlend.first:\n        case MixBlend.replace:\n          for (let i = 0; i < vertexCount; i++) {\n            const prev = prevVertices[i];\n            deform[i] += (prev + (nextVertices[i] - prev) * percent - deform[i]) * alpha;\n          }\n          break;\n        case MixBlend.add:\n          const vertexAttachment = slotAttachment;\n          if (vertexAttachment.bones == null) {\n            const setupVertices = vertexAttachment.vertices;\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent - setupVertices[i]) * alpha;\n            }\n          } else {\n            for (let i = 0; i < vertexCount; i++) {\n              const prev = prevVertices[i];\n              deform[i] += (prev + (nextVertices[i] - prev) * percent) * alpha;\n            }\n          }\n      }\n    }\n  }\n}\nclass EventTimeline {\n  constructor(frameCount) {\n    this.type = \"EventTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.events = new Array(frameCount);\n  }\n  getPropertyId() {\n    return 7 /* event */ << 24;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the event for the specified key frame. */\n  setFrame(frameIndex, event) {\n    this.data.push({ frameIndex, event });\n    this.frames[frameIndex] = event.time;\n    this.events[frameIndex] = event;\n  }\n  /** Fires events for frames > `lastTime` and <= `time`. */\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    if (firedEvents == null)\n      return;\n    const frames = this.frames;\n    const frameCount = this.frames.length;\n    if (lastTime > time) {\n      this.apply(skeleton, lastTime, Number.MAX_VALUE, firedEvents, alpha, blend, direction);\n      lastTime = -1;\n    } else if (lastTime >= frames[frameCount - 1])\n      return;\n    if (time < frames[0])\n      return;\n    let frame = 0;\n    if (lastTime < frames[0])\n      frame = 0;\n    else {\n      frame = Animation.binarySearch(frames, lastTime);\n      const frameTime = frames[frame];\n      while (frame > 0) {\n        if (frames[frame - 1] != frameTime)\n          break;\n        frame--;\n      }\n    }\n    for (; frame < frameCount && time >= frames[frame]; frame++)\n      firedEvents.push(this.events[frame]);\n  }\n}\nclass DrawOrderTimeline {\n  constructor(frameCount) {\n    this.type = \"DrawOrderTimeline\";\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount);\n    this.drawOrders = new Array(frameCount);\n  }\n  getPropertyId() {\n    return 8 /* drawOrder */ << 24;\n  }\n  /** The number of key frames for this timeline. */\n  getFrameCount() {\n    return this.frames.length;\n  }\n  /** Sets the time in seconds and the draw order for the specified key frame.\n   * @param drawOrder For each slot in {@link Skeleton#slots}, the index of the new draw order. May be null to use setup pose\n   *           draw order. */\n  setFrame(frameIndex, time, drawOrder) {\n    this.data.push({ frameIndex, time, drawOrder });\n    this.frames[frameIndex] = time;\n    this.drawOrders[frameIndex] = drawOrder;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const drawOrder = skeleton.drawOrder;\n    const slots = skeleton.slots;\n    if (direction == MixDirection.mixOut && blend == MixBlend.setup) {\n      Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    const frames = this.frames;\n    if (time < frames[0]) {\n      if (blend == MixBlend.setup || blend == MixBlend.first)\n        Utils.arrayCopy(skeleton.slots, 0, skeleton.drawOrder, 0, skeleton.slots.length);\n      return;\n    }\n    let frame = 0;\n    if (time >= frames[frames.length - 1])\n      frame = frames.length - 1;\n    else\n      frame = Animation.binarySearch(frames, time) - 1;\n    const drawOrderToSetupIndex = this.drawOrders[frame];\n    if (drawOrderToSetupIndex == null)\n      Utils.arrayCopy(slots, 0, drawOrder, 0, slots.length);\n    else {\n      for (let i = 0, n = drawOrderToSetupIndex.length; i < n; i++)\n        drawOrder[i] = slots[drawOrderToSetupIndex[i]];\n    }\n  }\n}\nconst _IkConstraintTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"IkConstraintTimeline\";\n    // time, mix, softness, bendDirection, compress, stretch, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _IkConstraintTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (9 /* ikConstraint */ << 24) + this.ikConstraintIndex;\n  }\n  /** Sets the time, mix and bend direction of the specified keyframe. */\n  setFrame(frameIndex, time, mix, bendDirection) {\n    this.data.push({ frameIndex, time, mix, bendDirection });\n    frameIndex *= _IkConstraintTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _IkConstraintTimeline.MIX] = mix;\n    this.frames[frameIndex + _IkConstraintTimeline.BEND_DIRECTION] = bendDirection;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.ikConstraints[this.ikConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.mix = constraint.data.mix;\n          constraint.softness = constraint.data.softness;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n          return;\n        case MixBlend.first:\n          constraint.mix += (constraint.data.mix - constraint.mix) * alpha;\n          constraint.softness += (constraint.data.softness - constraint.softness) * alpha;\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n      }\n      return;\n    }\n    if (time >= frames[frames.length - _IkConstraintTimeline.ENTRIES]) {\n      if (blend === MixBlend.setup) {\n        constraint.mix = constraint.data.mix + (frames[frames.length + _IkConstraintTimeline.PREV_MIX] - constraint.data.mix) * alpha;\n        constraint.softness = constraint.data.softness + (frames[frames.length + _IkConstraintTimeline.PREV_SOFTNESS] - constraint.data.softness) * alpha;\n        if (direction === MixDirection.mixOut) {\n          constraint.bendDirection = constraint.data.bendDirection;\n          constraint.compress = constraint.data.compress;\n          constraint.stretch = constraint.data.stretch;\n        } else {\n          constraint.bendDirection = frames[frames.length + _IkConstraintTimeline.PREV_BEND_DIRECTION];\n          constraint.compress = frames[frames.length + _IkConstraintTimeline.PREV_COMPRESS] !== 0;\n          constraint.stretch = frames[frames.length + _IkConstraintTimeline.PREV_STRETCH] !== 0;\n        }\n      } else {\n        constraint.mix += (frames[frames.length + _IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;\n        constraint.softness += (frames[frames.length + _IkConstraintTimeline.PREV_SOFTNESS] - constraint.softness) * alpha;\n        if (direction === MixDirection.mixIn) {\n          constraint.bendDirection = frames[frames.length + _IkConstraintTimeline.PREV_BEND_DIRECTION];\n          constraint.compress = frames[frames.length + _IkConstraintTimeline.PREV_COMPRESS] !== 0;\n          constraint.stretch = frames[frames.length + _IkConstraintTimeline.PREV_STRETCH] !== 0;\n        }\n      }\n      return;\n    }\n    const frame = Animation.binarySearch(frames, time, _IkConstraintTimeline.ENTRIES);\n    const mix = frames[frame + _IkConstraintTimeline.PREV_MIX];\n    const frameTime = frames[frame];\n    const percent = this.getCurvePercent(frame / _IkConstraintTimeline.ENTRIES - 1, 1 - (time - frameTime) / (frames[frame + _IkConstraintTimeline.PREV_TIME] - frameTime));\n    constraint.mix += (mix + (frames[frame + _IkConstraintTimeline.MIX] - mix) * percent - constraint.mix) * alpha;\n    constraint.bendDirection = Math.floor(frames[frame + _IkConstraintTimeline.PREV_BEND_DIRECTION]);\n  }\n};\nlet IkConstraintTimeline = _IkConstraintTimeline;\nIkConstraintTimeline.ENTRIES = 6;\nIkConstraintTimeline.PREV_TIME = -6;\nIkConstraintTimeline.PREV_MIX = -5;\nIkConstraintTimeline.PREV_SOFTNESS = -4;\nIkConstraintTimeline.PREV_BEND_DIRECTION = -3;\nIkConstraintTimeline.PREV_COMPRESS = -2;\nIkConstraintTimeline.PREV_STRETCH = -1;\nIkConstraintTimeline.MIX = 1;\nIkConstraintTimeline.SOFTNESS = 2;\nIkConstraintTimeline.BEND_DIRECTION = 3;\nIkConstraintTimeline.COMPRESS = 4;\nIkConstraintTimeline.STRETCH = 5;\nconst _TransformConstraintTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"TransformConstraintTimeline\";\n    // time, rotate mix, translate mix, scale mix, shear mix, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _TransformConstraintTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (10 /* transformConstraint */ << 24) + this.transformConstraintIndex;\n  }\n  /** The time in seconds, rotate mix, translate mix, scale mix, and shear mix for the specified key frame. */\n  setFrame(frameIndex, time, rotateMix, translateMix, scaleMix, shearMix) {\n    this.data.push({ frameIndex, time, rotateMix, translateMix, scaleMix, shearMix });\n    frameIndex *= _TransformConstraintTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _TransformConstraintTimeline.ROTATE] = rotateMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.TRANSLATE] = translateMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.SCALE] = scaleMix;\n    this.frames[frameIndex + _TransformConstraintTimeline.SHEAR] = shearMix;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.transformConstraints[this.transformConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      const data = constraint.data;\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.rotateMix = data.rotateMix;\n          constraint.translateMix = data.translateMix;\n          constraint.scaleMix = data.scaleMix;\n          constraint.shearMix = data.shearMix;\n          return;\n        case MixBlend.first:\n          constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;\n          constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;\n          constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;\n          constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;\n      }\n      return;\n    }\n    let rotate = 0;\n    let translate = 0;\n    let scale = 0;\n    let shear = 0;\n    if (time >= frames[frames.length - _TransformConstraintTimeline.ENTRIES]) {\n      const i = frames.length;\n      rotate = frames[i + _TransformConstraintTimeline.PREV_ROTATE];\n      translate = frames[i + _TransformConstraintTimeline.PREV_TRANSLATE];\n      scale = frames[i + _TransformConstraintTimeline.PREV_SCALE];\n      shear = frames[i + _TransformConstraintTimeline.PREV_SHEAR];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _TransformConstraintTimeline.ENTRIES);\n      rotate = frames[frame + _TransformConstraintTimeline.PREV_ROTATE];\n      translate = frames[frame + _TransformConstraintTimeline.PREV_TRANSLATE];\n      scale = frames[frame + _TransformConstraintTimeline.PREV_SCALE];\n      shear = frames[frame + _TransformConstraintTimeline.PREV_SHEAR];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _TransformConstraintTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _TransformConstraintTimeline.PREV_TIME] - frameTime)\n      );\n      rotate += (frames[frame + _TransformConstraintTimeline.ROTATE] - rotate) * percent;\n      translate += (frames[frame + _TransformConstraintTimeline.TRANSLATE] - translate) * percent;\n      scale += (frames[frame + _TransformConstraintTimeline.SCALE] - scale) * percent;\n      shear += (frames[frame + _TransformConstraintTimeline.SHEAR] - shear) * percent;\n    }\n    if (blend == MixBlend.setup) {\n      const data = constraint.data;\n      constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;\n      constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;\n      constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;\n      constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;\n    } else {\n      constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n      constraint.translateMix += (translate - constraint.translateMix) * alpha;\n      constraint.scaleMix += (scale - constraint.scaleMix) * alpha;\n      constraint.shearMix += (shear - constraint.shearMix) * alpha;\n    }\n  }\n};\nlet TransformConstraintTimeline = _TransformConstraintTimeline;\nTransformConstraintTimeline.ENTRIES = 5;\nTransformConstraintTimeline.PREV_TIME = -5;\nTransformConstraintTimeline.PREV_ROTATE = -4;\nTransformConstraintTimeline.PREV_TRANSLATE = -3;\nTransformConstraintTimeline.PREV_SCALE = -2;\nTransformConstraintTimeline.PREV_SHEAR = -1;\nTransformConstraintTimeline.ROTATE = 1;\nTransformConstraintTimeline.TRANSLATE = 2;\nTransformConstraintTimeline.SCALE = 3;\nTransformConstraintTimeline.SHEAR = 4;\nconst _PathConstraintPositionTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintPositionTimeline\";\n    // time, position, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _PathConstraintPositionTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (11 /* pathConstraintPosition */ << 24) + this.pathConstraintIndex;\n  }\n  /** Sets the time in seconds and path constraint position for the specified key frame. */\n  setFrame(frameIndex, time, value) {\n    this.data.push({ frameIndex, time, value });\n    frameIndex *= _PathConstraintPositionTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _PathConstraintPositionTimeline.VALUE] = value;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.position = constraint.data.position;\n          return;\n        case MixBlend.first:\n          constraint.position += (constraint.data.position - constraint.position) * alpha;\n      }\n      return;\n    }\n    let position = 0;\n    if (time >= frames[frames.length - _PathConstraintPositionTimeline.ENTRIES])\n      position = frames[frames.length + _PathConstraintPositionTimeline.PREV_VALUE];\n    else {\n      const frame = Animation.binarySearch(frames, time, _PathConstraintPositionTimeline.ENTRIES);\n      position = frames[frame + _PathConstraintPositionTimeline.PREV_VALUE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _PathConstraintPositionTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _PathConstraintPositionTimeline.PREV_TIME] - frameTime)\n      );\n      position += (frames[frame + _PathConstraintPositionTimeline.VALUE] - position) * percent;\n    }\n    if (blend == MixBlend.setup)\n      constraint.position = constraint.data.position + (position - constraint.data.position) * alpha;\n    else\n      constraint.position += (position - constraint.position) * alpha;\n  }\n};\nlet PathConstraintPositionTimeline = _PathConstraintPositionTimeline;\nPathConstraintPositionTimeline.ENTRIES = 2;\nPathConstraintPositionTimeline.PREV_TIME = -2;\nPathConstraintPositionTimeline.PREV_VALUE = -1;\nPathConstraintPositionTimeline.VALUE = 1;\nclass PathConstraintSpacingTimeline extends PathConstraintPositionTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintSpacingTimeline\";\n  }\n  getPropertyId() {\n    return (12 /* pathConstraintSpacing */ << 24) + this.pathConstraintIndex;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.spacing = constraint.data.spacing;\n          return;\n        case MixBlend.first:\n          constraint.spacing += (constraint.data.spacing - constraint.spacing) * alpha;\n      }\n      return;\n    }\n    let spacing = 0;\n    if (time >= frames[frames.length - PathConstraintSpacingTimeline.ENTRIES])\n      spacing = frames[frames.length + PathConstraintSpacingTimeline.PREV_VALUE];\n    else {\n      const frame = Animation.binarySearch(frames, time, PathConstraintSpacingTimeline.ENTRIES);\n      spacing = frames[frame + PathConstraintSpacingTimeline.PREV_VALUE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / PathConstraintSpacingTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + PathConstraintSpacingTimeline.PREV_TIME] - frameTime)\n      );\n      spacing += (frames[frame + PathConstraintSpacingTimeline.VALUE] - spacing) * percent;\n    }\n    if (blend == MixBlend.setup)\n      constraint.spacing = constraint.data.spacing + (spacing - constraint.data.spacing) * alpha;\n    else\n      constraint.spacing += (spacing - constraint.spacing) * alpha;\n  }\n}\nconst _PathConstraintMixTimeline = class extends CurveTimeline {\n  constructor(frameCount) {\n    super(frameCount);\n    this.type = \"PathConstraintMixTimeline\";\n    // time, rotate mix, translate mix, ...\n    this.data = [];\n    this.frames = Utils.newFloatArray(frameCount * _PathConstraintMixTimeline.ENTRIES);\n  }\n  getPropertyId() {\n    return (13 /* pathConstraintMix */ << 24) + this.pathConstraintIndex;\n  }\n  /** The time in seconds, rotate mix, and translate mix for the specified key frame. */\n  setFrame(frameIndex, time, rotateMix, translateMix) {\n    this.data.push({ frameIndex, time, rotateMix, translateMix });\n    frameIndex *= _PathConstraintMixTimeline.ENTRIES;\n    this.frames[frameIndex] = time;\n    this.frames[frameIndex + _PathConstraintMixTimeline.ROTATE] = rotateMix;\n    this.frames[frameIndex + _PathConstraintMixTimeline.TRANSLATE] = translateMix;\n  }\n  apply(skeleton, lastTime, time, firedEvents, alpha, blend, direction) {\n    const frames = this.frames;\n    const constraint = skeleton.pathConstraints[this.pathConstraintIndex];\n    if (!constraint.active)\n      return;\n    if (time < frames[0]) {\n      switch (blend) {\n        case MixBlend.setup:\n          constraint.rotateMix = constraint.data.rotateMix;\n          constraint.translateMix = constraint.data.translateMix;\n          return;\n        case MixBlend.first:\n          constraint.rotateMix += (constraint.data.rotateMix - constraint.rotateMix) * alpha;\n          constraint.translateMix += (constraint.data.translateMix - constraint.translateMix) * alpha;\n      }\n      return;\n    }\n    let rotate = 0;\n    let translate = 0;\n    if (time >= frames[frames.length - _PathConstraintMixTimeline.ENTRIES]) {\n      rotate = frames[frames.length + _PathConstraintMixTimeline.PREV_ROTATE];\n      translate = frames[frames.length + _PathConstraintMixTimeline.PREV_TRANSLATE];\n    } else {\n      const frame = Animation.binarySearch(frames, time, _PathConstraintMixTimeline.ENTRIES);\n      rotate = frames[frame + _PathConstraintMixTimeline.PREV_ROTATE];\n      translate = frames[frame + _PathConstraintMixTimeline.PREV_TRANSLATE];\n      const frameTime = frames[frame];\n      const percent = this.getCurvePercent(\n        frame / _PathConstraintMixTimeline.ENTRIES - 1,\n        1 - (time - frameTime) / (frames[frame + _PathConstraintMixTimeline.PREV_TIME] - frameTime)\n      );\n      rotate += (frames[frame + _PathConstraintMixTimeline.ROTATE] - rotate) * percent;\n      translate += (frames[frame + _PathConstraintMixTimeline.TRANSLATE] - translate) * percent;\n    }\n    if (blend == MixBlend.setup) {\n      constraint.rotateMix = constraint.data.rotateMix + (rotate - constraint.data.rotateMix) * alpha;\n      constraint.translateMix = constraint.data.translateMix + (translate - constraint.data.translateMix) * alpha;\n    } else {\n      constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;\n      constraint.translateMix += (translate - constraint.translateMix) * alpha;\n    }\n  }\n};\nlet PathConstraintMixTimeline = _PathConstraintMixTimeline;\nPathConstraintMixTimeline.ENTRIES = 3;\nPathConstraintMixTimeline.PREV_TIME = -3;\nPathConstraintMixTimeline.PREV_ROTATE = -2;\nPathConstraintMixTimeline.PREV_TRANSLATE = -1;\nPathConstraintMixTimeline.ROTATE = 1;\nPathConstraintMixTimeline.TRANSLATE = 2;\n\nexport { Animation, AttachmentTimeline, ColorTimeline, CurveTimeline, DeformTimeline, DrawOrderTimeline, EventTimeline, IkConstraintTimeline, PathConstraintMixTimeline, PathConstraintPositionTimeline, PathConstraintSpacingTimeline, RotateTimeline, ScaleTimeline, ShearTimeline, TimelineType, TransformConstraintTimeline, TranslateTimeline, TwoColorTimeline };\n//# sourceMappingURL=Animation.mjs.map\n"],"names":["Utils","MathUtils","MixBlend","MixDirection","VertexAttachment"],"mappings":"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"}